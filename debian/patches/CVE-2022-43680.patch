From 5290462a7ea1278a8d5c0d5b2860d4e244f997e4 Mon Sep 17 00:00:00 2001
From: Sebastian Pipping <sebastian@pipping.org>
Date: Tue, 20 Sep 2022 02:44:34 +0200
Subject: Fix overeager DTD destruction in XML_ExternalEntityParserCreate

--- a/lib/xmlparse.c
+++ b/lib/xmlparse.c
@@ -853,6 +853,14 @@
   parserInit(parser, encodingName);
 
   if (encodingName && !protocolEncodingName) {
+    if (dtd) {
+      // We need to stop the upcoming call to XML_ParserFree from happily
+      // destroying parser->m_dtd because the DTD is shared with the parent
+      // parser and the only guard that keeps XML_ParserFree from destroying
+      // parser->m_dtd is parser->m_isParamEntity but it will be set to
+      // XML_TRUE only later in XML_ExternalEntityParserCreate (or not at all).
+      _dtd = NULL;
+    }
     XML_ParserFree(parser);
     return NULL;
   }
--- a/tests/runtests.c
+++ b/tests/runtests.c
@@ -1751,12 +1751,103 @@
 END_TEST
 #endif // defined(XML_CONTEXT_BYTES)
 
+/* Test for CVE-2022-43680 */
+
+/* Control variable; the number of times duff_allocator() will successfully
+ * allocate */
+#define ALLOC_ALWAYS_SUCCEED (-1)
+#define REALLOC_ALWAYS_SUCCEED (-1)
+
+static intptr_t allocation_count = ALLOC_ALWAYS_SUCCEED;
+static intptr_t reallocation_count = REALLOC_ALWAYS_SUCCEED;
+
+/* Crocked allocator for allocation failure tests */
+static void *
+duff_allocator(size_t size) {
+  if (allocation_count == 0)
+    return NULL;
+  if (allocation_count != ALLOC_ALWAYS_SUCCEED)
+    allocation_count--;
+  return malloc(size);
+}
+
+/* Crocked reallocator for allocation failure tests */
+static void *
+duff_reallocator(void *ptr, size_t size) {
+  if (reallocation_count == 0)
+    return NULL;
+  if (reallocation_count != REALLOC_ALWAYS_SUCCEED)
+    reallocation_count--;
+  return realloc(ptr, size);
+}
+
+static void
+alloc_setup(void) {
+  XML_Memory_Handling_Suite memsuite = {duff_allocator, duff_reallocator, free};
+
+  /* Ensure the parser creation will go through */
+  allocation_count = ALLOC_ALWAYS_SUCCEED;
+  reallocation_count = REALLOC_ALWAYS_SUCCEED;
+  parser = XML_ParserCreate_MM(NULL, &memsuite, NULL);
+  if (parser == NULL)
+    fail("Parser not created");
+}
+
+static void
+alloc_teardown(void) {
+  basic_teardown();
+}
+
+static int XMLCALL
+external_entity_parser_create_alloc_fail_handler(XML_Parser parser,
+                                                 const XML_Char *context,
+                                                 const XML_Char *base,
+                                                 const XML_Char *systemId,
+                                                 const XML_Char *publicId) {
+  if (context != NULL)
+    fail("Unexpected non-NULL context");
+
+  // The following number intends to fail the upcoming allocation in line
+  // "parser->m_protocolEncodingName = copyString(encodingName,
+  // &(parser->m_mem));" in function parserInit.
+  allocation_count = 3;
+
+  const XML_Char *const encodingName = XCS("UTF-8"); // needs something non-NULL
+  const XML_Parser ext_parser
+      = XML_ExternalEntityParserCreate(parser, context, encodingName);
+  if (ext_parser != NULL)
+    fail(
+        "Call to XML_ExternalEntityParserCreate was expected to fail out-of-memory");
+
+  allocation_count = ALLOC_ALWAYS_SUCCEED;
+  return XML_STATUS_ERROR;
+}
+
+START_TEST(test_alloc_reset_after_external_entity_parser_create_fail) {
+  const char *const text = "<!DOCTYPE doc SYSTEM 'foo'><doc/>";
+
+  XML_SetExternalEntityRefHandler(
+      parser, external_entity_parser_create_alloc_fail_handler);
+  XML_SetParamEntityParsing(parser, XML_PARAM_ENTITY_PARSING_ALWAYS);
+
+  if (XML_Parse(parser, text, (int)strlen(text), XML_TRUE)
+      != XML_STATUS_ERROR)
+    fail("Call to parse was expected to fail");
+
+  if (XML_GetErrorCode(parser) != XML_ERROR_EXTERNAL_ENTITY_HANDLING)
+    fail("Call to parse was expected to fail from the external entity handler");
+
+  XML_ParserReset(parser, NULL);
+}
+END_TEST
+
 static Suite *
 make_suite(void)
 {
     Suite *s = suite_create("basic");
     TCase *tc_basic = tcase_create("basic tests");
     TCase *tc_namespace = tcase_create("XML namespaces");
+    TCase *tc_alloc = tcase_create("allocation tests");
 
     suite_add_tcase(s, tc_basic);
     tcase_add_checked_fixture(tc_basic, basic_setup, basic_teardown);
@@ -1827,6 +1918,12 @@
   tcase_add_test(tc_basic, test_get_buffer_3_overflow);
 #endif
 
+    suite_add_tcase(s, tc_alloc);
+    tcase_add_checked_fixture(tc_alloc, alloc_setup, alloc_teardown);
+#if defined(XML_DTD)
+  tcase_add_test(tc_alloc, test_alloc_reset_after_external_entity_parser_create_fail);
+#endif
+
     return s;
 }
 
